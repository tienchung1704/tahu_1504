// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode="prisma"
}
enum HobbyType {
  GAMING
  MUSIC
  PROGRAMMING
  MOVIES
  SPORTS
  ANIME
  BOOKS
  TECHNOLOGY
  TRAVEL
  FOOD
}
model Hobby {
  id        String     @id @default(uuid())
  type      HobbyType
  profiles  ProfileHobby[]
}
model ProfileHobby {
  id        String   @id @default(uuid())
  
  profileId String
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)

  hobbyId   String
  hobby     Hobby    @relation(fields: [hobbyId], references: [id], onDelete: Cascade)

  @@unique([profileId, hobbyId]) // 1 user không chọn trùng hobby
  @@index([profileId])
  @@index([hobbyId])
}
model Profile{
  id String @id @default(uuid())
  userId String @unique
  name String
  imageUrl String @db.Text
  email String @db.Text

 hobbies  ProfileHobby[]

  servers Server[]
  members Member[]
  channels Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Server{
  id String @id @default(uuid())
  name String
  imageUrl String @db.Text

  inviteCode String @unique

  profileId String
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  
  members Member[]
  channels Channel[]
  hobby      String?
  isPublic   Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([profileId])
}

enum MemberRole {
  ADMIN
  GUEST
  MODERATOR
}

model Member{
  id String @id @default(uuid())
  role MemberRole @default(GUEST)

  profileId String
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId String
  server Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages Message[]
  directMessages DirectMessage[]
  
  conversationsInitiated Conversation[] @relation("MemberOne")
  conversationsReceived Conversation[] @relation("MemberTwo")

  channels  ChannelMember[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([serverId])
}

enum ChannelType{
  TEXT
  AUDIO
  VIDEO
}

model Channel{
  id String @id @default(uuid())
  name String
  type ChannelType @default(TEXT)

  profileId String
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId String
  server Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages Message[]
  members ChannelMember[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([serverId])
}

model Message {
  id String @id @default(uuid())
  content String @db.Text
  fileUrl String? @db.Text
  memberId String
  member Member @relation (fields: [memberId], references: [id], onDelete: Cascade)

  channelId String
  channel Channel @relation (fields: [channelId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  createdAt DateTime  @default(now())
  updatedAt DateTime @updatedAt

  @@index([channelId])
  @@index([memberId])
}

model Conversation {
  id String @id @default(uuid())
  memberOneId String 
  memberOne Member @relation("MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)

  memberTwoId String 
  memberTwo Member @relation("MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)

  directMessages DirectMessage[]

  @@index([memberTwoId])

  @@unique([memberOneId, memberTwoId])

}

model DirectMessage {
  id String @id @default(uuid())
  content String @db.Text
  fileUrl String? @db.Text

  memberId String
  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  conversationId String
  conversation Conversation @relation (fields: [conversationId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  deleted Boolean @default(false)
  @@index([memberId])
  @@index([conversationId])
}

model ChannelMember {
  id        String   @id @default(uuid())
  
  channelId String
  channel   Channel  @relation(fields: [channelId], references: [id], onDelete: Cascade)
  
  memberId  String
  member    Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)

  joinedAt  DateTime @default(now())

  @@unique([channelId, memberId]) // 1 member chỉ join 1 channel một lần
  @@index([channelId])
  @@index([memberId])
}